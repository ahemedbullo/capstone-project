// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  username             String              @id
  password             String
  budgets              Budget[]
  expenses             Expense[]
  plaidAccessToken     String?
  plaidItem            String?
  accounts             Account[]
  lastTransactionFetch DateTime?
  uploadedStatements   UploadedStatement[]
  financialGoals       String?
  monthlySavingsTarget Float?
  annualIncomeTarget   Float?
}

model Account {
  id             Int              @id @default(autoincrement())
  username       String
  user           User             @relation(fields: [userId], references: [username])
  userId         String
  accountId      String           @unique
  name           String
  type           String
  balance        Float
  lastUpdated    DateTime         @default(now())
  balanceHistory BalanceHistory[]

  @@unique([username, accountId])
}

model Budget {
  id           Int       @id @default(autoincrement())
  budgetName   String
  budgetAmount Float
  user         User      @relation(fields: [userId], references: [username])
  userId       String
  expenses     Expense[]
}

model Expense {
  id            Int      @id @default(autoincrement())
  expenseName   String
  expenseAmount Float
  purchaseDate  DateTime
  userId        String
  user          User     @relation(fields: [userId], references: [username])
  budgetId      Int?
  budget        Budget?  @relation(fields: [budgetId], references: [id])
  budgetName    String?
  transactionId String?  @unique
  accountName   String?
}

model TempExpense {
  id          Int     @id @default(autoincrement())
  username    String?
  date        String
  description String?
  amount      Float
}

model UploadedStatement {
  id         Int      @id @default(autoincrement())
  filename   String
  filePath   String
  uploadDate DateTime @default(now())
  userId     String
  user       User     @relation(fields: [userId], references: [username])
}

model BalanceHistory {
  id        Int      @id @default(autoincrement())
  accountId String?
  balance   Float
  date      DateTime @default(now())
  account   Account? @relation(fields: [accountId], references: [accountId])
}
